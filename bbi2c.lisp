;; pins for ESP32
(defvar *sda* 21)
(defvar *scl* 22)

(defun %dly ()
    (dotimes (_ 100)))

(defun %high (pin &optional (wait t))
    (pinmode pin :input)
    (%dly)
    (loop (if (or (not wait) (digitalread pin)) (return))))

(defun %low (pin)
    (digitalwrite pin :low)
    (pinmode pin :output))

(defun %end ()
    (%high *sda*)
    (%high *scl*))

(defun %start ()
    (%low *scl*)
    (%low *sda*))

(defun %write-ack (byte)
    (dotimes (_ 8)
        (if (plusp (logand #x80 byte))
            (%high *sda* nil)
            (%low *sda*))
        (%high *scl*)
        (%low *scl*)
        (setq byte (ash byte 1)))
    (%high *sda* nil)
    (%high *scl*)
    (let ((nack (digitalread *sda*)))
         (%low *scl*)
         (not nack)))

(defun %read-ackm (&optional (last nil))
    (let ((byte 0))
         (%high *sda* nil)
         (dotimes (_ 8)
             (%high *scl*)
             (if (digitalread *sda*)
                 (setq byte (logior byte 1)))
             (%low *scl*)
             (setq byte (ash byte 1)))
         (if last
             (%high *sda* nil))
         (%high *scl*)
         (%low *scl*)
         (%low *sda*)))

(defun bbi2c-write-register (addr reg val)
     (let (ok)
          (%start)
          (setq ok (dolist (val (list (ash addr 1) reg val) t)
                       (if (not (%write-ack val)) (return nil))))
          (%end)
          ok))

(defun bbi2c-read-register (addr reg)
     (let (val)
          (%start)
          (if (dolist (val (list (ash addr 1) reg) t)
                       (if (not (%write-ack val)) (return nil)))
              (progn
                  (%end)
                  (%start)
                  (if (not (%write-ack (logior 1 (ash addr 1))))
                      (return))
                  (setq val (%read-ackm t))))
          (%end)
          val))
